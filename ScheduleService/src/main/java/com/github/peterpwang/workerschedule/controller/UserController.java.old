package com.github.peterpwang.workerschedule.controller;

import org.springframework.http.HttpStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.Optional;
import java.util.stream.Collectors;
import javax.validation.Valid;

import com.github.peterpwang.workerschedule.domain.User;
import com.github.peterpwang.workerschedule.repository.UserRepository;

@RestController
@RequestMapping("/api")
public class UserController {
	
    private UserRepository repository;

	UserController(UserRepository repository) {
		this.repository = repository;
	}

	@GetMapping("/users")
	Iterable<User> findUser() {
		return repository.findAll();
	}

	@PostMapping("/users")
	User newUser(@Valid @RequestBody User newUser) {
		return repository.save(newUser);
	}

	// Single item
	@GetMapping("/users/{id}")
	User getUser(@PathVariable Long id) {
		Optional<User> optional =  repository.findById(id);
		return optional.isPresent() ? optional.get() : null;
			//.orElseThrow(() -> new Exception("Not found: " + id));
	}

	@PutMapping("/users/{id}")
	User updateUser(@RequestBody User newUser, @PathVariable Long id) {

		return repository.findById(id)
			.map(user -> {
				user.setName(newUser.getName());
				user.setPassword(newUser.getPassword());
				user.setDescription(newUser.getDescription());
				user.setActive(newUser.getActive());
				user.setManager(newUser.getManager());
				return repository.save(user);
			})
			.orElseGet(() -> {
				newUser.setId(id);
				return repository.save(newUser);
			});
	}

	@DeleteMapping("/users/{id}")
	void deleteUser(@PathVariable Long id) {
		repository.deleteById(id);
	}
}